// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tsscommv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectLinkClient is the client API for DirectLink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectLinkClient interface {
	// Send uses a stream since the clients of this RPC will invoke it multiple times throughout the life of the server.
	Send(ctx context.Context, opts ...grpc.CallOption) (DirectLink_SendClient, error)
}

type directLinkClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectLinkClient(cc grpc.ClientConnInterface) DirectLinkClient {
	return &directLinkClient{cc}
}

func (c *directLinkClient) Send(ctx context.Context, opts ...grpc.CallOption) (DirectLink_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &DirectLink_ServiceDesc.Streams[0], "/tsscomm.v1.DirectLink/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &directLinkSendClient{stream}
	return x, nil
}

type DirectLink_SendClient interface {
	Send(*PropagatedMessage) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type directLinkSendClient struct {
	grpc.ClientStream
}

func (x *directLinkSendClient) Send(m *PropagatedMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *directLinkSendClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DirectLinkServer is the server API for DirectLink service.
// All implementations must embed UnimplementedDirectLinkServer
// for forward compatibility
type DirectLinkServer interface {
	// Send uses a stream since the clients of this RPC will invoke it multiple times throughout the life of the server.
	Send(DirectLink_SendServer) error
	mustEmbedUnimplementedDirectLinkServer()
}

// UnimplementedDirectLinkServer must be embedded to have forward compatible implementations.
type UnimplementedDirectLinkServer struct {
}

func (UnimplementedDirectLinkServer) Send(DirectLink_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedDirectLinkServer) mustEmbedUnimplementedDirectLinkServer() {}

// UnsafeDirectLinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectLinkServer will
// result in compilation errors.
type UnsafeDirectLinkServer interface {
	mustEmbedUnimplementedDirectLinkServer()
}

func RegisterDirectLinkServer(s grpc.ServiceRegistrar, srv DirectLinkServer) {
	s.RegisterService(&DirectLink_ServiceDesc, srv)
}

func _DirectLink_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DirectLinkServer).Send(&directLinkSendServer{stream})
}

type DirectLink_SendServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*PropagatedMessage, error)
	grpc.ServerStream
}

type directLinkSendServer struct {
	grpc.ServerStream
}

func (x *directLinkSendServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *directLinkSendServer) Recv() (*PropagatedMessage, error) {
	m := new(PropagatedMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DirectLink_ServiceDesc is the grpc.ServiceDesc for DirectLink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectLink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tsscomm.v1.DirectLink",
	HandlerType: (*DirectLinkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _DirectLink_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tsscomm/v1/tsscomm.proto",
}
