// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: tsscomm/v1/tsscomm.proto

package tsscommv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// copyOfTssLib proto.
type PartyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Key     []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Index   uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *PartyId) Reset() {
	*x = PartyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsscomm_v1_tsscomm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyId) ProtoMessage() {}

func (x *PartyId) ProtoReflect() protoreflect.Message {
	mi := &file_tsscomm_v1_tsscomm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyId.ProtoReflect.Descriptor instead.
func (*PartyId) Descriptor() ([]byte, []int) {
	return file_tsscomm_v1_tsscomm_proto_rawDescGZIP(), []int{0}
}

func (x *PartyId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PartyId) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *PartyId) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PartyId) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// SignedMessage is a message containing a payload for someone specific (containing encrypted and
// MACed payload) or as a broadcast message (plaintext but signed).
type SignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the message itself
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"` // In case of unicast: should be encrypted with a specific DH derived shared key.
	// both of the following fields are used by the TSS lib, and can be used by the reliable-broadcast protocol.
	Sender     *PartyId   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipients []*PartyId `protobuf:"bytes,3,rep,name=recipients,proto3" json:"recipients,omitempty"`
	// used to identify the number of message for this sender. starts from 0 and advances with each message this signer sends.
	MsgSerialNumber uint64 `protobuf:"varint,4,opt,name=msg_serial_number,json=msgSerialNumber,proto3" json:"msg_serial_number,omitempty"`
	// if this message is part of reliable broadcast protocol, it should include the signature of the sender.
	// otherwise it should contain the mac over this message.
	//
	// Types that are assignable to Authentication:
	//
	//	*SignedMessage_MAC
	//	*SignedMessage_Signature
	Authentication isSignedMessage_Authentication `protobuf_oneof:"Authentication"`
}

func (x *SignedMessage) Reset() {
	*x = SignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsscomm_v1_tsscomm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessage) ProtoMessage() {}

func (x *SignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tsscomm_v1_tsscomm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessage.ProtoReflect.Descriptor instead.
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return file_tsscomm_v1_tsscomm_proto_rawDescGZIP(), []int{1}
}

func (x *SignedMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SignedMessage) GetSender() *PartyId {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *SignedMessage) GetRecipients() []*PartyId {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *SignedMessage) GetMsgSerialNumber() uint64 {
	if x != nil {
		return x.MsgSerialNumber
	}
	return 0
}

func (m *SignedMessage) GetAuthentication() isSignedMessage_Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (x *SignedMessage) GetMAC() []byte {
	if x, ok := x.GetAuthentication().(*SignedMessage_MAC); ok {
		return x.MAC
	}
	return nil
}

func (x *SignedMessage) GetSignature() []byte {
	if x, ok := x.GetAuthentication().(*SignedMessage_Signature); ok {
		return x.Signature
	}
	return nil
}

type isSignedMessage_Authentication interface {
	isSignedMessage_Authentication()
}

type SignedMessage_MAC struct {
	MAC []byte `protobuf:"bytes,5,opt,name=MAC,proto3,oneof"`
}

type SignedMessage_Signature struct {
	Signature []byte `protobuf:"bytes,6,opt,name=signature,proto3,oneof"`
}

func (*SignedMessage_MAC) isSignedMessage_Authentication() {}

func (*SignedMessage_Signature) isSignedMessage_Authentication() {}

// Echo is a message explicitly used by the Reliable Broadcast protocol.
type Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *SignedMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// TODO: If we use TLS channels, we don't have to sign the echo, since it is already authenticated over the tls. we just need to ensure
	// the echoer id and public key is correct.
	// without the signature here, this means the signer is also the creator of this message.
	Signature []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Echoer    *PartyId `protobuf:"bytes,3,opt,name=echoer,proto3" json:"echoer,omitempty"`
}

func (x *Echo) Reset() {
	*x = Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsscomm_v1_tsscomm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_tsscomm_v1_tsscomm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo.ProtoReflect.Descriptor instead.
func (*Echo) Descriptor() ([]byte, []int) {
	return file_tsscomm_v1_tsscomm_proto_rawDescGZIP(), []int{2}
}

func (x *Echo) GetMessage() *SignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Echo) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Echo) GetEchoer() *PartyId {
	if x != nil {
		return x.Echoer
	}
	return nil
}

// PropagatedMessage is a message that is sent across the network,
// either to a specific recipient or all nodes (using reliable broadcast).
type PropagatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*PropagatedMessage_Unicast
	//	*PropagatedMessage_Echo
	Payload isPropagatedMessage_Payload `protobuf_oneof:"payload"`
}

func (x *PropagatedMessage) Reset() {
	*x = PropagatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsscomm_v1_tsscomm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagatedMessage) ProtoMessage() {}

func (x *PropagatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tsscomm_v1_tsscomm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagatedMessage.ProtoReflect.Descriptor instead.
func (*PropagatedMessage) Descriptor() ([]byte, []int) {
	return file_tsscomm_v1_tsscomm_proto_rawDescGZIP(), []int{3}
}

func (m *PropagatedMessage) GetPayload() isPropagatedMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PropagatedMessage) GetUnicast() *SignedMessage {
	if x, ok := x.GetPayload().(*PropagatedMessage_Unicast); ok {
		return x.Unicast
	}
	return nil
}

func (x *PropagatedMessage) GetEcho() *Echo {
	if x, ok := x.GetPayload().(*PropagatedMessage_Echo); ok {
		return x.Echo
	}
	return nil
}

type isPropagatedMessage_Payload interface {
	isPropagatedMessage_Payload()
}

type PropagatedMessage_Unicast struct {
	Unicast *SignedMessage `protobuf:"bytes,1,opt,name=Unicast,proto3,oneof"`
}

type PropagatedMessage_Echo struct {
	Echo *Echo `protobuf:"bytes,2,opt,name=Echo,proto3,oneof"`
}

func (*PropagatedMessage_Unicast) isPropagatedMessage_Payload() {}

func (*PropagatedMessage_Echo) isPropagatedMessage_Payload() {}

var File_tsscomm_v1_tsscomm_proto protoreflect.FileDescriptor

var file_tsscomm_v1_tsscomm_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x73, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x73, 0x73,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x73, 0x73, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x73, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x73, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x4d, 0x41,
	0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x4d, 0x41, 0x43, 0x12, 0x1e,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x86, 0x01, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x73, 0x73,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x65, 0x63, 0x68, 0x6f, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x73, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x52, 0x06, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x73, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x73, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0x4d, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1d,
	0x2e, 0x74, 0x73, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x75, 0x73, 0x6f, 0x6e, 0x65, 0x2f,
	0x77, 0x6f, 0x72, 0x6d, 0x68, 0x6f, 0x6c, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74,
	0x73, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tsscomm_v1_tsscomm_proto_rawDescOnce sync.Once
	file_tsscomm_v1_tsscomm_proto_rawDescData = file_tsscomm_v1_tsscomm_proto_rawDesc
)

func file_tsscomm_v1_tsscomm_proto_rawDescGZIP() []byte {
	file_tsscomm_v1_tsscomm_proto_rawDescOnce.Do(func() {
		file_tsscomm_v1_tsscomm_proto_rawDescData = protoimpl.X.CompressGZIP(file_tsscomm_v1_tsscomm_proto_rawDescData)
	})
	return file_tsscomm_v1_tsscomm_proto_rawDescData
}

var file_tsscomm_v1_tsscomm_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tsscomm_v1_tsscomm_proto_goTypes = []interface{}{
	(*PartyId)(nil),           // 0: tsscomm.v1.PartyId
	(*SignedMessage)(nil),     // 1: tsscomm.v1.SignedMessage
	(*Echo)(nil),              // 2: tsscomm.v1.Echo
	(*PropagatedMessage)(nil), // 3: tsscomm.v1.PropagatedMessage
	(*emptypb.Empty)(nil),     // 4: google.protobuf.Empty
}
var file_tsscomm_v1_tsscomm_proto_depIdxs = []int32{
	0, // 0: tsscomm.v1.SignedMessage.sender:type_name -> tsscomm.v1.PartyId
	0, // 1: tsscomm.v1.SignedMessage.recipients:type_name -> tsscomm.v1.PartyId
	1, // 2: tsscomm.v1.Echo.message:type_name -> tsscomm.v1.SignedMessage
	0, // 3: tsscomm.v1.Echo.echoer:type_name -> tsscomm.v1.PartyId
	1, // 4: tsscomm.v1.PropagatedMessage.Unicast:type_name -> tsscomm.v1.SignedMessage
	2, // 5: tsscomm.v1.PropagatedMessage.Echo:type_name -> tsscomm.v1.Echo
	3, // 6: tsscomm.v1.DirectLink.Send:input_type -> tsscomm.v1.PropagatedMessage
	4, // 7: tsscomm.v1.DirectLink.Send:output_type -> google.protobuf.Empty
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_tsscomm_v1_tsscomm_proto_init() }
func file_tsscomm_v1_tsscomm_proto_init() {
	if File_tsscomm_v1_tsscomm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tsscomm_v1_tsscomm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsscomm_v1_tsscomm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsscomm_v1_tsscomm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsscomm_v1_tsscomm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tsscomm_v1_tsscomm_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SignedMessage_MAC)(nil),
		(*SignedMessage_Signature)(nil),
	}
	file_tsscomm_v1_tsscomm_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*PropagatedMessage_Unicast)(nil),
		(*PropagatedMessage_Echo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tsscomm_v1_tsscomm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tsscomm_v1_tsscomm_proto_goTypes,
		DependencyIndexes: file_tsscomm_v1_tsscomm_proto_depIdxs,
		MessageInfos:      file_tsscomm_v1_tsscomm_proto_msgTypes,
	}.Build()
	File_tsscomm_v1_tsscomm_proto = out.File
	file_tsscomm_v1_tsscomm_proto_rawDesc = nil
	file_tsscomm_v1_tsscomm_proto_goTypes = nil
	file_tsscomm_v1_tsscomm_proto_depIdxs = nil
}
